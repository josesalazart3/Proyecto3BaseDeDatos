package com.mycompany.proyecto3;

import java.sql.Connection;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

import com.mycompany.proyecto3.Consulta;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.JTextField;

public class Vista extends javax.swing.JFrame {

    private Connection connection;
    private DefaultTableModel modelo; // Declarar el modelo aquí

    /**
     * Creates new form Vista
     */
    public Vista() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem2 = new javax.swing.JMenuItem();
        jScrollPane1 = new javax.swing.JScrollPane();
        TablaPrincipal = new javax.swing.JTable();
        BotonActualizar = new javax.swing.JButton();
        SincronizarDatos = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        ConexionMySQL = new javax.swing.JMenuItem();
        ConexionPostrasql = new javax.swing.JMenuItem();
        PanelInsertar = new javax.swing.JMenu();

        jMenuItem2.setText("jMenuItem2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        TablaPrincipal.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "DPI", "Primer Nombre", "Segundo Nombre", "Primer Apellido", "Segundo Apellido", "Direccion Domiciliar", "Telefono Casa", "Telefono Movil", "Salario Base", "Bonificacion"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Double.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Double.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        TablaPrincipal.setDropMode(javax.swing.DropMode.INSERT);
        TablaPrincipal.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                none(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                TablaPrincipalMousePressed(evt);
            }
        });
        TablaPrincipal.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TablaPrincipalKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TablaPrincipalKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(TablaPrincipal);

        BotonActualizar.setText("Actualizar");
        BotonActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BotonActualizarActionPerformed(evt);
            }
        });

        SincronizarDatos.setText("Sincronizar");
        SincronizarDatos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SincronizarDatosActionPerformed(evt);
            }
        });

        jMenu1.setText("Conexion");

        ConexionMySQL.setText("MySQL");
        ConexionMySQL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConexionMySQLActionPerformed(evt);
            }
        });
        jMenu1.add(ConexionMySQL);

        ConexionPostrasql.setText("Postgresql");
        ConexionPostrasql.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConexionPostrasqlActionPerformed(evt);
            }
        });
        jMenu1.add(ConexionPostrasql);

        jMenuBar1.add(jMenu1);

        PanelInsertar.setText("Acciones");
        jMenuBar1.add(PanelInsertar);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(74, 74, 74)
                .addComponent(BotonActualizar)
                .addGap(138, 138, 138)
                .addComponent(SincronizarDatos)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1048, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(122, 122, 122)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BotonActualizar)
                    .addComponent(SincronizarDatos))
                .addContainerGap(7, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void ConexionMySQLActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConexionMySQLActionPerformed
        try {
            Conexion conexion = new Conexion();
            connection = conexion.getMySQLConnection(); // Asignar la conexión a la variable

            if (connection != null) {
                JOptionPane.showMessageDialog(this, "Conexión a MySQL establecida correctamente.");

                // Crear una instancia de Consulta
                Consulta consulta = new Consulta();

                // Cargar datos de la tabla 'persona' en la tabla
                DefaultTableModel modelo = consulta.cargarDatos(connection, "persona");
                TablaPrincipal.setModel(modelo);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al conectar a MySQL: " + e.getMessage());
        }
    }//GEN-LAST:event_ConexionMySQLActionPerformed

    private void ConexionPostrasqlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConexionPostrasqlActionPerformed
        try {
            Conexion conexion = new Conexion();
            connection = conexion.getPostgresConnection(); // Asignar la conexión a la variable

            if (connection != null) {
                JOptionPane.showMessageDialog(this, "Conexión a PostgreSQL establecida correctamente.");

                // Crear una instancia de Consulta
                Consulta consulta = new Consulta();

                // Cargar datos de la tabla 'persona' en la tabla
                DefaultTableModel modelo = consulta.cargarDatos(connection, "persona");
                TablaPrincipal.setModel(modelo);
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al conectar a PostgreSQL: " + e.getMessage());
        }
    }//GEN-LAST:event_ConexionPostrasqlActionPerformed

    private void BotonActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BotonActualizarActionPerformed

        String baseDatos;
        try {
            // Asumiendo que puedes obtener el nombre de la base de datos a través de la conexión
            baseDatos = connection.getMetaData().getDatabaseProductName(); // Nombre de la base de datos
        } catch (SQLException e) {
            baseDatos = "Base de datos desconocida"; // Valor por defecto en caso de error
            e.printStackTrace();
        }

        try {
            Statement stmt = connection.createStatement(); // Usa la conexión de la variable
            int rowCount = TablaPrincipal.getRowCount();
            boolean actualizacionesExitosas = false; // Bandera para controlar si hubo actualizaciones

            for (int i = 0; i < rowCount; i++) {
                String dpi = TablaPrincipal.getValueAt(i, 0).toString(); // DPI

                // Consulta para obtener los valores antiguos
                String querySelect = "SELECT * FROM persona WHERE dpi = '" + dpi + "'";
                ResultSet rs = stmt.executeQuery(querySelect);

                if (rs.next()) {
                    // Obtener los valores antiguos
                    String antiguoPrimerNombre = rs.getString("primernombre");
                    String antiguoSegundoNombre = rs.getString("segundonombre");
                    String antiguoPrimerApellido = rs.getString("primerapellido");
                    String antiguoSegundoApellido = rs.getString("segundoapellido");
                    String antiguoDireccionDomiciliar = rs.getString("direccion_domiciliar");
                    String antiguoTelefonoCasa = rs.getString("telefono_casa");
                    String antiguoTelefonoMovil = rs.getString("telefono_movil");
                    double antiguoSalarioBase = rs.getDouble("salario_base");
                    double antiguoBonificacion = rs.getDouble("bonificacion");

                    // Obtener los nuevos valores desde la tabla
                    String nuevoPrimerNombre = TablaPrincipal.getValueAt(i, 1).toString();
                    String nuevoSegundoNombre = TablaPrincipal.getValueAt(i, 2).toString();
                    String nuevoPrimerApellido = TablaPrincipal.getValueAt(i, 3).toString();
                    String nuevoSegundoApellido = TablaPrincipal.getValueAt(i, 4).toString();
                    String nuevoDireccionDomiciliar = TablaPrincipal.getValueAt(i, 5).toString();
                    String nuevoTelefonoCasa = TablaPrincipal.getValueAt(i, 6).toString();
                    String nuevoTelefonoMovil = TablaPrincipal.getValueAt(i, 7).toString();
                    double nuevoSalarioBase = Double.parseDouble(TablaPrincipal.getValueAt(i, 8).toString());
                    double nuevoBonificacion = Double.parseDouble(TablaPrincipal.getValueAt(i, 9).toString());

                    // Comparar y construir el detalle de la transacción
                    StringBuilder detalle = new StringBuilder("Actualizado DPI: " + dpi);
                    boolean cambiosRealizados = false;

                    if (!antiguoPrimerNombre.equals(nuevoPrimerNombre)) {
                        detalle.append(", N. Primero: ").append(antiguoPrimerNombre).append(" -> ").append(nuevoPrimerNombre);
                        cambiosRealizados = true;
                    }
                    if (!antiguoSegundoNombre.equals(nuevoSegundoNombre)) {
                        detalle.append(", N. Segundo: ").append(antiguoSegundoNombre).append(" -> ").append(nuevoSegundoNombre);
                        cambiosRealizados = true;
                    }
                    if (!antiguoPrimerApellido.equals(nuevoPrimerApellido)) {
                        detalle.append(", A. Primero: ").append(antiguoPrimerApellido).append(" -> ").append(nuevoPrimerApellido);
                        cambiosRealizados = true;
                    }
                    if (!antiguoSegundoApellido.equals(nuevoSegundoApellido)) {
                        detalle.append(", A. Segundo: ").append(antiguoSegundoApellido).append(" -> ").append(nuevoSegundoApellido);
                        cambiosRealizados = true;
                    }
                    if (!antiguoDireccionDomiciliar.equals(nuevoDireccionDomiciliar)) {
                        detalle.append(", Dirección: ").append(antiguoDireccionDomiciliar).append(" -> ").append(nuevoDireccionDomiciliar);
                        cambiosRealizados = true;
                    }
                    if (!antiguoTelefonoCasa.equals(nuevoTelefonoCasa)) {
                        detalle.append(", Teléfono Casa: ").append(antiguoTelefonoCasa).append(" -> ").append(nuevoTelefonoCasa);
                        cambiosRealizados = true;
                    }
                    if (!antiguoTelefonoMovil.equals(nuevoTelefonoMovil)) {
                        detalle.append(", Teléfono Móvil: ").append(antiguoTelefonoMovil).append(" -> ").append(nuevoTelefonoMovil);
                        cambiosRealizados = true;
                    }
                    if (antiguoSalarioBase != nuevoSalarioBase) {
                        detalle.append(", Salario Base: ").append(antiguoSalarioBase).append(" -> ").append(nuevoSalarioBase);
                        cambiosRealizados = true;
                    }
                    if (antiguoBonificacion != nuevoBonificacion) {
                        detalle.append(", Bonificación: ").append(antiguoBonificacion).append(" -> ").append(nuevoBonificacion);
                        cambiosRealizados = true;
                    }

                    // Ejecutar la actualización solo si hay cambios
                    if (cambiosRealizados) {
                        String queryUpdate = "UPDATE persona SET primernombre = '" + nuevoPrimerNombre
                                + "', segundonombre = '" + nuevoSegundoNombre
                                + "', primerapellido = '" + nuevoPrimerApellido
                                + "', segundoapellido = '" + nuevoSegundoApellido
                                + "', direccion_domiciliar = '" + nuevoDireccionDomiciliar
                                + "', telefono_casa = '" + nuevoTelefonoCasa
                                + "', telefono_movil = '" + nuevoTelefonoMovil
                                + "', salario_base = " + nuevoSalarioBase
                                + ", bonificacion = " + nuevoBonificacion
                                + " WHERE dpi = '" + dpi + "'";
                        stmt.executeUpdate(queryUpdate);
                        AuditLog.registrarTransaccion("Actualización", baseDatos, detalle.toString());
                        actualizacionesExitosas = true; // Se realizó al menos una actualización
                    }
                }
            }

            // Mostrar mensaje solo una vez después de todas las actualizaciones
            if (actualizacionesExitosas) {
                JOptionPane.showMessageDialog(null, "Datos actualizados exitosamente en " + baseDatos + ".");
            } else {
                JOptionPane.showMessageDialog(null, "No se realizaron cambios en los datos en " + baseDatos + ".");
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error al actualizar datos: " + e.getMessage());
        } finally {
            // Aquí puedes cerrar la conexión si es necesario
        }

    }//GEN-LAST:event_BotonActualizarActionPerformed

    private void none(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_none
        // TODO add your handling code here:
    }//GEN-LAST:event_none

    private void TablaPrincipalMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TablaPrincipalMousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_TablaPrincipalMousePressed

    private void TablaPrincipalKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TablaPrincipalKeyPressed
        // Verificar si la tecla presionada es "Suprimir"
        if (evt.getKeyCode() == KeyEvent.VK_DELETE) {
            int filaSeleccionada = TablaPrincipal.getSelectedRow();
            if (filaSeleccionada != -1) {
                // Obtener el DPI de la fila seleccionada
                String dpi = (String) TablaPrincipal.getValueAt(filaSeleccionada, 0);

                // Confirmar eliminación
                int respuesta = JOptionPane.showConfirmDialog(null, "¿Estás seguro de eliminar este registro?", "Confirmar eliminación", JOptionPane.YES_NO_OPTION);
                if (respuesta == JOptionPane.YES_OPTION) {
                    // Eliminar el registro de la base de datos y de la tabla
                    eliminarRegistro(dpi);
                    DefaultTableModel modelo = (DefaultTableModel) TablaPrincipal.getModel();
                    modelo.removeRow(filaSeleccionada);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Por favor, selecciona una fila para eliminar.");
            }
        }
    }//GEN-LAST:event_TablaPrincipalKeyPressed

    private void TablaPrincipalKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TablaPrincipalKeyTyped
        // Verificar que la tecla presionada sea Enter
        if (evt.getKeyChar() == KeyEvent.VK_ENTER) {
            // Crear un cuadro de diálogo para ingresar datos
            String dpi = JOptionPane.showInputDialog("Ingrese el DPI:");
            String primerNombre = JOptionPane.showInputDialog("Ingrese el primer nombre:");
            String segundoNombre = JOptionPane.showInputDialog("Ingrese el segundo nombre:");
            String primerApellido = JOptionPane.showInputDialog("Ingrese el primer apellido:");
            String segundoApellido = JOptionPane.showInputDialog("Ingrese el segundo apellido:");
            String direccionDomiciliar = JOptionPane.showInputDialog("Ingrese la dirección domiciliaria:");
            String telefonoCasa = JOptionPane.showInputDialog("Ingrese el teléfono de casa:");
            String telefonoMovil = JOptionPane.showInputDialog("Ingrese el teléfono móvil:");
            String salarioBase = JOptionPane.showInputDialog("Ingrese el salario base:");
            String bonificacion = JOptionPane.showInputDialog("Ingrese la bonificación:");

            // Verificar que los campos no estén vacíos
            if (dpi != null && !dpi.trim().isEmpty()
                    && primerNombre != null && !primerNombre.trim().isEmpty()
                    && primerApellido != null && !primerApellido.trim().isEmpty()) {

                // Insertar el registro en la base de datos
                insertarRegistro(dpi, primerNombre, segundoNombre, primerApellido, segundoApellido, direccionDomiciliar, telefonoCasa, telefonoMovil, salarioBase, bonificacion);

                // Actualizar la tabla para reflejar el nuevo registro
                actualizarTabla();
            } else {
                JOptionPane.showMessageDialog(null, "Los campos DPI, primer nombre y primer apellido son obligatorios.");
            }
        }
    }//GEN-LAST:event_TablaPrincipalKeyTyped

    private void SincronizarDatosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SincronizarDatosActionPerformed
        // Crear una instancia de la clase Conexion
        Conexion conexion = new Conexion();

        // Obtener conexiones a MySQL y PostgreSQL
        Connection mysqlConnection = conexion.getMySQLConnection();
        Connection postgresConnection = conexion.getPostgresConnection();

        if (mysqlConnection == null || postgresConnection == null) {
            System.out.println("Error al establecer conexión a las bases de datos.");
            return; // Salir si no se pudieron crear las conexiones
        }

        // Crear instancias de las clases de base de datos con las conexiones
        MySQLDatabase mysqlDB = new MySQLDatabase(mysqlConnection);
        PostgreSQLDatabase postgresDB = new PostgreSQLDatabase(postgresConnection);

        // Sincronizar datos de MySQL a PostgreSQL
        try {
            mysqlDB.sincronizarConPostgreSQL(postgresDB);
            System.out.println("Sincronización de MySQL a PostgreSQL completada.");
        } catch (Exception e) {
            System.out.println("Error durante la sincronización de MySQL a PostgreSQL: " + e.getMessage());
        }

        // Sincronizar datos de PostgreSQL a MySQL
        try {
            postgresDB.sincronizarConMySQL(mysqlDB);
            System.out.println("Sincronización de PostgreSQL a MySQL completada.");
        } catch (Exception e) {
            System.out.println("Error durante la sincronización de PostgreSQL a MySQL: " + e.getMessage());
        } finally {
            // Cerrar conexiones
            conexion.closeConnections();
        }

    }//GEN-LAST:event_SincronizarDatosActionPerformed
// Método para insertar un registro en la base de datos

    private void insertarRegistro(String dpi, String primerNombre, String segundoNombre, String primerApellido, String segundoApellido,
            String direccionDomiciliar, String telefonoCasa, String telefonoMovil, String salarioBase, String bonificacion) {
        Connection conn = null;
        String baseDatos;
        try {
            // Obtener la conexión (ajusta esto según tu implementación)
            if (connection != null) {
                conn = connection; // Usa la conexión existente
            }

            // Obtener el nombre de la base de datos
            baseDatos = conn.getMetaData().getDatabaseProductName(); // Nombre de la base de datos

            String sql = "INSERT INTO persona (dpi, primerNombre, segundoNombre, primerApellido, segundoApellido, direccion_domiciliar, telefono_casa, telefono_movil, salario_base, bonificacion) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
            PreparedStatement stmt = conn.prepareStatement(sql);
            stmt.setString(1, dpi);
            stmt.setString(2, primerNombre);
            stmt.setString(3, segundoNombre);
            stmt.setString(4, primerApellido);
            stmt.setString(5, segundoApellido);
            stmt.setString(6, direccionDomiciliar);
            stmt.setString(7, telefonoCasa);
            stmt.setString(8, telefonoMovil);
            stmt.setDouble(9, Double.parseDouble(salarioBase)); // Asegúrate de manejar la conversión a Double
            stmt.setDouble(10, Double.parseDouble(bonificacion)); // Asegúrate de manejar la conversión a Double

            int rowsAffected = stmt.executeUpdate();
            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(null, "Registro insertado correctamente en " + baseDatos + ".");
                // Registrar la transacción
                AuditLog.registrarTransaccion("Inserción", baseDatos, "Registro insertado con DPI: " + dpi);
            } else {
                JOptionPane.showMessageDialog(null, "No se pudo insertar el registro.");
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error al insertar el registro: " + ex.getMessage());
        } catch (NumberFormatException nfe) {
            JOptionPane.showMessageDialog(null, "Error: el salario base y la bonificación deben ser números válidos.");
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error inesperado: " + e.getMessage());
        } finally {
            // Cerrar la conexión si es necesario (depende de tu gestión de conexiones)
            if (conn != null) {
                try {
                    conn.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }

// Método para actualizar la tabla (vuelve a cargar los datos)
    private void actualizarTabla() {
        try {
            // Cargar los datos de nuevo en la tabla
            Consulta consulta = new Consulta();
            DefaultTableModel modelo = consulta.cargarDatos(connection, "persona");
            TablaPrincipal.setModel(modelo);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error al actualizar la tabla: " + e.getMessage());
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Vista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Vista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Vista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Vista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Vista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Vista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Vista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Vista.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Vista().setVisible(true);
            }
        });
    }
    // Método para inicializar la tabla con el menú contextual

    private void inicializarTablaConMenuContextual() {
        // Crear el menú contextual
        JPopupMenu menuContextual = new JPopupMenu();
        JMenuItem eliminarItem = new JMenuItem("Eliminar");
        menuContextual.add(eliminarItem);

        // Agregar ActionListener para el elemento de menú "Eliminar"
        eliminarItem.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int filaSeleccionada = TablaPrincipal.getSelectedRow();
                if (filaSeleccionada != -1) {
                    // Obtener el DPI de la fila seleccionada
                    String dpi = (String) TablaPrincipal.getValueAt(filaSeleccionada, 0);

                    // Confirmar eliminación
                    int respuesta = JOptionPane.showConfirmDialog(null, "¿Estás seguro de eliminar este registro?", "Confirmar eliminación", JOptionPane.YES_NO_OPTION);
                    if (respuesta == JOptionPane.YES_OPTION) {
                        // Eliminar el registro de la base de datos y de la tabla
                        eliminarRegistro(dpi);
                        DefaultTableModel modelo = (DefaultTableModel) TablaPrincipal.getModel();
                        modelo.removeRow(filaSeleccionada);
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Por favor, selecciona una fila para eliminar.");
                }
            }
        });

        // Agregar el MouseListener para detectar clics derechos en la tabla
        TablaPrincipal.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                mostrarMenuSiClicDerecho(e);
            }

            @Override
            public void mouseReleased(MouseEvent e) {
                mostrarMenuSiClicDerecho(e);
            }

            // Método para mostrar el menú contextual si el clic es derecho
            private void mostrarMenuSiClicDerecho(MouseEvent e) {
                if (e.isPopupTrigger()) { // Detectar si el clic es derecho
                    int fila = TablaPrincipal.rowAtPoint(e.getPoint());
                    if (fila != -1) {
                        TablaPrincipal.setRowSelectionInterval(fila, fila);
                        menuContextual.show(TablaPrincipal, e.getX(), e.getY());
                    }
                }
            }
        });
    }

// Método para eliminar un registro de la base de datos
    private void eliminarRegistro(String dpi) {
        if (connection == null) {
            JOptionPane.showMessageDialog(null, "No hay una conexión activa.");
            return;
        }

        String sql = "DELETE FROM persona WHERE dpi = ?";
        String baseDatos;
        try {
            // Obtener el nombre de la base de datos
            baseDatos = connection.getMetaData().getDatabaseProductName(); // Nombre de la base de datos

            PreparedStatement stmt = connection.prepareStatement(sql);
            stmt.setString(1, dpi);
            int rowsAffected = stmt.executeUpdate();
            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(null, "Registro eliminado correctamente de " + baseDatos + ".");
                // Registrar la transacción en el log
                AuditLog.registrarTransaccion("Eliminación", baseDatos, "Registro eliminado con DPI: " + dpi);
            } else {
                JOptionPane.showMessageDialog(null, "No se encontró el registro a eliminar.");
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error eliminando el registro: " + ex.getMessage());
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error inesperado: " + e.getMessage());
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BotonActualizar;
    private javax.swing.JMenuItem ConexionMySQL;
    private javax.swing.JMenuItem ConexionPostrasql;
    private javax.swing.JMenu PanelInsertar;
    private javax.swing.JButton SincronizarDatos;
    private javax.swing.JTable TablaPrincipal;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
